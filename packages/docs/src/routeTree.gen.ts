/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ComponentsSpaceRouteImport } from './routes/components/space'
import { Route as ComponentsIconRouteImport } from './routes/components/icon'
import { Route as ComponentsButtonRouteImport } from './routes/components/button'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsSpaceRoute = ComponentsSpaceRouteImport.update({
  id: '/components/space',
  path: '/components/space',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsIconRoute = ComponentsIconRouteImport.update({
  id: '/components/icon',
  path: '/components/icon',
  getParentRoute: () => rootRouteImport,
} as any)
const ComponentsButtonRoute = ComponentsButtonRouteImport.update({
  id: '/components/button',
  path: '/components/button',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/components/button': typeof ComponentsButtonRoute
  '/components/icon': typeof ComponentsIconRoute
  '/components/space': typeof ComponentsSpaceRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/components/button': typeof ComponentsButtonRoute
  '/components/icon': typeof ComponentsIconRoute
  '/components/space': typeof ComponentsSpaceRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/components/button': typeof ComponentsButtonRoute
  '/components/icon': typeof ComponentsIconRoute
  '/components/space': typeof ComponentsSpaceRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/components/button'
    | '/components/icon'
    | '/components/space'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/components/button' | '/components/icon' | '/components/space'
  id:
    | '__root__'
    | '/'
    | '/components/button'
    | '/components/icon'
    | '/components/space'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ComponentsButtonRoute: typeof ComponentsButtonRoute
  ComponentsIconRoute: typeof ComponentsIconRoute
  ComponentsSpaceRoute: typeof ComponentsSpaceRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/space': {
      id: '/components/space'
      path: '/components/space'
      fullPath: '/components/space'
      preLoaderRoute: typeof ComponentsSpaceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/icon': {
      id: '/components/icon'
      path: '/components/icon'
      fullPath: '/components/icon'
      preLoaderRoute: typeof ComponentsIconRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/components/button': {
      id: '/components/button'
      path: '/components/button'
      fullPath: '/components/button'
      preLoaderRoute: typeof ComponentsButtonRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComponentsButtonRoute: ComponentsButtonRoute,
  ComponentsIconRoute: ComponentsIconRoute,
  ComponentsSpaceRoute: ComponentsSpaceRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
